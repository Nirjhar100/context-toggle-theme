{"ast":null,"code":"var _jsxFileName = \"/Users/nirjhar/Space/web_D/React/context-theme/src/context/ThemeContext.js\";\nimport React, { useState, useLayoutEffect } from 'react';\nconst ThemeContext = React.createContext({\n  dark: false,\n  toggle: () => {}\n});\nexport default ThemeContext;\nexport function ThemeProvider(props) {\n  //keep state of current theme\n  const [dark, setDark] = useState(false);\n\n  const applyTheme = theme => {\n    const root = document.getElementsByTagName('html')[0];\n    root.style.cssText = theme.join(';');\n  };\n\n  const toggle = () => {\n    setDark(!dark);\n    window.localStorage.setItem('darkTheme', !dark);\n  }; //paints the app before it render elements\n\n\n  useLayoutEffect(() => {\n    const lastTheme = window.localStorage.getItem('darkTheme');\n\n    if (lastTheme === 'true') {\n      setDark(true);\n      applyTheme(darkTheme);\n    }\n\n    if (!lastTheme || lastTheme === 'false') {\n      setDark(false);\n      applyTheme(lightTheme);\n    }\n  }, [dark]); //styles\n\n  const lightTheme = ['--border: rgba(0,0,0,.2)', '--shadow: #000', '--heading: rgba(255,100,0,1)', '--main: #1d8f13', '--text: #000', '--textAlt: #fff', '--inactive: rgba(0,0,0,.3)', '--background: white'];\n  const darkTheme = ['--border: rgba(255,255,255,.1)', '--shadow: #000', '--heading: rgba(255,255,5,.9)', '--main: #79248f', '--text: rgb(255, 255, 255)', '--textAlt: black', '--inactive: rgba(255,255,255,.3)', '--background: black'];\n  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: {\n      dark,\n      toggle\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, props.children);\n}","map":{"version":3,"sources":["/Users/nirjhar/Space/web_D/React/context-theme/src/context/ThemeContext.js"],"names":["React","useState","useLayoutEffect","ThemeContext","createContext","dark","toggle","ThemeProvider","props","setDark","applyTheme","theme","root","document","getElementsByTagName","style","cssText","join","window","localStorage","setItem","lastTheme","getItem","darkTheme","lightTheme","children"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAwBC,eAAxB,QAA8C,OAA9C;AAEA,MAAMC,YAAY,GAAGH,KAAK,CAACI,aAAN,CAAoB;AACrCC,EAAAA,IAAI,EAAC,KADgC;AAErCC,EAAAA,MAAM,EAAC,MAAI,CAAE;AAFwB,CAApB,CAArB;AAKA,eAAeH,YAAf;AAEA,OAAO,SAASI,aAAT,CAAuBC,KAAvB,EAA6B;AAChC;AACA,QAAM,CAACH,IAAD,EAAOI,OAAP,IAAgBR,QAAQ,CAAC,KAAD,CAA9B;;AAIA,QAAMS,UAAU,GAACC,KAAK,IAAE;AACpB,UAAMC,IAAI,GAAGC,QAAQ,CAACC,oBAAT,CAA8B,MAA9B,EAAsC,CAAtC,CAAb;AACAF,IAAAA,IAAI,CAACG,KAAL,CAAWC,OAAX,GAAqBL,KAAK,CAACM,IAAN,CAAW,GAAX,CAArB;AACH,GAHD;;AAKA,QAAMX,MAAM,GAAC,MAAI;AACbG,IAAAA,OAAO,CAAC,CAACJ,IAAF,CAAP;AACAa,IAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,WAA5B,EAAwC,CAACf,IAAzC;AACH,GAHD,CAXgC,CAgB/B;;;AACAH,EAAAA,eAAe,CAAC,MAAM;AACnB,UAAMmB,SAAS,GAAGH,MAAM,CAACC,YAAP,CAAoBG,OAApB,CAA4B,WAA5B,CAAlB;;AAEA,QAAGD,SAAS,KAAG,MAAf,EAAsB;AAClBZ,MAAAA,OAAO,CAAC,IAAD,CAAP;AACAC,MAAAA,UAAU,CAACa,SAAD,CAAV;AACH;;AACD,QAAI,CAACF,SAAD,IAAcA,SAAS,KAAK,OAAhC,EAAyC;AACrCZ,MAAAA,OAAO,CAAC,KAAD,CAAP;AACAC,MAAAA,UAAU,CAACc,UAAD,CAAV;AACH;AACJ,GAXe,EAWb,CAACnB,IAAD,CAXa,CAAf,CAjB+B,CA6BhC;;AACA,QAAMmB,UAAU,GAAG,CACf,0BADe,EAEf,gBAFe,EAGf,8BAHe,EAIf,iBAJe,EAKf,cALe,EAMf,iBANe,EAOf,4BAPe,EAQf,qBARe,CAAnB;AAWE,QAAMD,SAAS,GAAG,CAChB,gCADgB,EAEhB,gBAFgB,EAGhB,+BAHgB,EAIhB,iBAJgB,EAKhB,4BALgB,EAMhB,kBANgB,EAOhB,kCAPgB,EAQhB,qBARgB,CAAlB;AAWF,sBACI,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAI;AAC5BlB,MAAAA,IAD4B;AACvBC,MAAAA;AADuB,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGKE,KAAK,CAACiB,QAHX,CADJ;AAYH","sourcesContent":["import React,{useState, useLayoutEffect} from 'react'\n\nconst ThemeContext = React.createContext({\n    dark:false,\n    toggle:()=>{},\n})\n\nexport default ThemeContext\n\nexport function ThemeProvider(props){\n    //keep state of current theme\n    const [dark, setDark]=useState(false);\n\n    \n\n    const applyTheme=theme=>{\n        const root = document.getElementsByTagName('html')[0];\n        root.style.cssText = theme.join(';');\n    }\n\n    const toggle=()=>{\n        setDark(!dark);\n        window.localStorage.setItem('darkTheme',!dark)\n    }\n\n     //paints the app before it render elements\n     useLayoutEffect(() => {\n        const lastTheme = window.localStorage.getItem('darkTheme');\n\n        if(lastTheme==='true'){\n            setDark(true)\n            applyTheme(darkTheme)\n        }\n        if (!lastTheme || lastTheme === 'false') {\n            setDark(false);\n            applyTheme(lightTheme);\n        } \n    }, [dark])\n    //styles\n    const lightTheme = [\n        '--border: rgba(0,0,0,.2)',\n        '--shadow: #000',\n        '--heading: rgba(255,100,0,1)',\n        '--main: #1d8f13',\n        '--text: #000',\n        '--textAlt: #fff',\n        '--inactive: rgba(0,0,0,.3)',\n        '--background: white',\n      ];\n      \n      const darkTheme = [\n        '--border: rgba(255,255,255,.1)',\n        '--shadow: #000',\n        '--heading: rgba(255,255,5,.9)',\n        '--main: #79248f',\n        '--text: rgb(255, 255, 255)',\n        '--textAlt: black',\n        '--inactive: rgba(255,255,255,.3)',\n        '--background: black',\n      ];\n\n    return(\n        <ThemeContext.Provider value = {{\n            dark,toggle,\n        }}>\n            {props.children}\n        </ThemeContext.Provider>\n\n    ) \n\n    \n\n     \n}"]},"metadata":{},"sourceType":"module"}